# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_liq', [dirname(__file__)])
        except ImportError:
            import _liq
            return _liq
        if fp is not None:
            try:
                _mod = imp.load_module('_liq', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _liq = swig_import_helper()
    del swig_import_helper
else:
    import _liq
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class liq_color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, liq_color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, liq_color, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _liq.liq_color_r_set
    __swig_getmethods__["r"] = _liq.liq_color_r_get
    if _newclass:r = _swig_property(_liq.liq_color_r_get, _liq.liq_color_r_set)
    __swig_setmethods__["g"] = _liq.liq_color_g_set
    __swig_getmethods__["g"] = _liq.liq_color_g_get
    if _newclass:g = _swig_property(_liq.liq_color_g_get, _liq.liq_color_g_set)
    __swig_setmethods__["b"] = _liq.liq_color_b_set
    __swig_getmethods__["b"] = _liq.liq_color_b_get
    if _newclass:b = _swig_property(_liq.liq_color_b_get, _liq.liq_color_b_set)
    __swig_setmethods__["a"] = _liq.liq_color_a_set
    __swig_getmethods__["a"] = _liq.liq_color_a_get
    if _newclass:a = _swig_property(_liq.liq_color_a_get, _liq.liq_color_a_set)
    def __init__(self): 
        this = _liq.new_liq_color()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _liq.delete_liq_color
    __del__ = lambda self : None;
liq_color_swigregister = _liq.liq_color_swigregister
liq_color_swigregister(liq_color)

class liq_palette(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, liq_palette, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, liq_palette, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _liq.liq_palette_count_set
    __swig_getmethods__["count"] = _liq.liq_palette_count_get
    if _newclass:count = _swig_property(_liq.liq_palette_count_get, _liq.liq_palette_count_set)
    __swig_setmethods__["entries"] = _liq.liq_palette_entries_set
    __swig_getmethods__["entries"] = _liq.liq_palette_entries_get
    if _newclass:entries = _swig_property(_liq.liq_palette_entries_get, _liq.liq_palette_entries_set)
    def __init__(self): 
        this = _liq.new_liq_palette()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _liq.delete_liq_palette
    __del__ = lambda self : None;
liq_palette_swigregister = _liq.liq_palette_swigregister
liq_palette_swigregister(liq_palette)

LIQ_OK = _liq.LIQ_OK
LIQ_VALUE_OUT_OF_RANGE = _liq.LIQ_VALUE_OUT_OF_RANGE
LIQ_OUT_OF_MEMORY = _liq.LIQ_OUT_OF_MEMORY
LIQ_NOT_READY = _liq.LIQ_NOT_READY
LIQ_BITMAP_NOT_AVAILABLE = _liq.LIQ_BITMAP_NOT_AVAILABLE
LIQ_BUFFER_TOO_SMALL = _liq.LIQ_BUFFER_TOO_SMALL
LIQ_INVALID_POINTER = _liq.LIQ_INVALID_POINTER
LIQ_OWN_ROWS = _liq.LIQ_OWN_ROWS
LIQ_OWN_PIXELS = _liq.LIQ_OWN_PIXELS

def liq_attr_create():
  return _liq.liq_attr_create()
liq_attr_create = _liq.liq_attr_create

def liq_attr_create_with_allocator(*args):
  return _liq.liq_attr_create_with_allocator(*args)
liq_attr_create_with_allocator = _liq.liq_attr_create_with_allocator

def liq_attr_copy(*args):
  return _liq.liq_attr_copy(*args)
liq_attr_copy = _liq.liq_attr_copy

def liq_attr_destroy(*args):
  return _liq.liq_attr_destroy(*args)
liq_attr_destroy = _liq.liq_attr_destroy

def liq_set_max_colors(*args):
  return _liq.liq_set_max_colors(*args)
liq_set_max_colors = _liq.liq_set_max_colors

def liq_set_speed(*args):
  return _liq.liq_set_speed(*args)
liq_set_speed = _liq.liq_set_speed

def liq_set_min_opacity(*args):
  return _liq.liq_set_min_opacity(*args)
liq_set_min_opacity = _liq.liq_set_min_opacity

def liq_set_quality(*args):
  return _liq.liq_set_quality(*args)
liq_set_quality = _liq.liq_set_quality

def liq_set_last_index_transparent(*args):
  return _liq.liq_set_last_index_transparent(*args)
liq_set_last_index_transparent = _liq.liq_set_last_index_transparent

def liq_set_log_callback(*args):
  return _liq.liq_set_log_callback(*args)
liq_set_log_callback = _liq.liq_set_log_callback

def liq_set_log_flush_callback(*args):
  return _liq.liq_set_log_flush_callback(*args)
liq_set_log_flush_callback = _liq.liq_set_log_flush_callback

def liq_image_create_rgba_rows(*args):
  return _liq.liq_image_create_rgba_rows(*args)
liq_image_create_rgba_rows = _liq.liq_image_create_rgba_rows

def liq_image_create_rgba(*args):
  return _liq.liq_image_create_rgba(*args)
liq_image_create_rgba = _liq.liq_image_create_rgba

def liq_image_create_custom(*args):
  return _liq.liq_image_create_custom(*args)
liq_image_create_custom = _liq.liq_image_create_custom

def liq_image_set_memory_ownership(*args):
  return _liq.liq_image_set_memory_ownership(*args)
liq_image_set_memory_ownership = _liq.liq_image_set_memory_ownership

def liq_image_get_width(*args):
  return _liq.liq_image_get_width(*args)
liq_image_get_width = _liq.liq_image_get_width

def liq_image_get_height(*args):
  return _liq.liq_image_get_height(*args)
liq_image_get_height = _liq.liq_image_get_height
# This file is compatible with both classic and new-style classes.


